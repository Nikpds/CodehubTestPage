{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","class","src","alt","data-target","id","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gKAAAA,EAAOC,QAAU,IAA0B,kC,gHC+E5BC,MA3Ef,WACE,OACE,yBAAKC,MAAM,0BACT,yBAAKA,MAAM,aACT,yBAAKA,MAAM,UACT,yBAAKA,MAAM,aACT,yBAAKA,MAAM,gBACT,uBAAGA,MAAM,eACP,yBACEC,IAAI,+CACJC,IAAI,UAGR,0BAAMF,MAAM,uBAAuBG,cAAY,mBAC7C,+BACA,+BACA,iCAGJ,yBAAKC,GAAG,kBAAkBJ,MAAM,eAC9B,yBAAKA,MAAM,cACT,uBAAGA,MAAM,yBAAT,QACA,uBAAGA,MAAM,eAAT,YACA,uBAAGA,MAAM,eAAT,iBACA,0BAAMA,MAAM,eACV,uBAAGA,MAAM,8BACP,0BAAMA,MAAM,QACV,uBAAGA,MAAM,kBAEX,iDASd,yBAAKA,MAAM,aACT,yBAAKA,MAAM,+BACT,uBAAGA,MAAM,SAAT,YACA,uBAAGA,MAAM,0BAAT,mBAIJ,yBAAKA,MAAM,aACT,yBAAKA,MAAM,8BACT,yBAAKA,MAAM,aACT,4BACE,wBAAIA,MAAM,aACR,wCAEF,4BACE,yCAEF,4BACE,oCAEF,4BACE,wCAEF,4BACE,0CAEF,4BACE,4CCzDIK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.d67fca6f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div class=\"hero is-info is-medium\">\n      <div class=\"hero-head\">\n        <nav class=\"navbar\">\n          <div class=\"container\">\n            <div class=\"navbar-brand\">\n              <a class=\"navbar-item\">\n                <img\n                  src=\"https://bulma.io/images/bulma-type-white.png\"\n                  alt=\"Logo\"\n                />\n              </a>\n              <span class=\"navbar-burger burger\" data-target=\"navbarMenuHeroB\">\n                <span></span>\n                <span></span>\n                <span></span>\n              </span>\n            </div>\n            <div id=\"navbarMenuHeroB\" class=\"navbar-menu\">\n              <div class=\"navbar-end\">\n                <a class=\"navbar-item is-active\">Home</a>\n                <a class=\"navbar-item\">Examples</a>\n                <a class=\"navbar-item\">Documentation</a>\n                <span class=\"navbar-item\">\n                  <a class=\"button is-info is-inverted\">\n                    <span class=\"icon\">\n                      <i class=\"fa fa-github\"></i>\n                    </span>\n                    <span>Download</span>\n                  </a>\n                </span>\n              </div>\n            </div>\n          </div>\n        </nav>\n      </div>\n\n      <div class=\"hero-body\">\n        <div class=\"container has-text-centered\">\n          <p class=\"title\">NICK PDS</p>\n          <p class=\"subtitle has-text-dark\">Codehub React</p>\n        </div>\n      </div>\n\n      <div class=\"hero-foot\">\n        <nav class=\"tabs is-boxed is-fullwidth\">\n          <div class=\"container\">\n            <ul>\n              <li class=\"is-active\">\n                <a>Overview</a>\n              </li>\n              <li>\n                <a>Modifiers</a>\n              </li>\n              <li>\n                <a>Grid</a>\n              </li>\n              <li>\n                <a>Elements</a>\n              </li>\n              <li>\n                <a>Components</a>\n              </li>\n              <li>\n                <a>Layout</a>\n              </li>\n            </ul>\n          </div>\n        </nav>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport '../node_modules/bulma/css/bulma.css'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}